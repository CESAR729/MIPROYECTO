import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Cargar el dataset
df = pd.read_csv('animia.csv', encoding='latin-1', delimiter=';')

# Ver los primeros registros del dataset
print(df.head())
print(df.columns)
print(df.info())

# Preprocesamiento de los datos
# Asumimos que las columnas necesarias son 'features' para las características y 'target' para la variable de salida
# Cambia 'target' y 'features' por los nombres de las columnas que correspondan en tu dataset

# Ejemplo de preprocesamiento:
# Si 'target' es la columna que quieres predecir y el resto son características
X = df.drop('CLASE', axis=1)  # Características
y = df['CLASE']  # Variable objetivo

# Dividir los datos en conjunto de entrenamiento y prueba (80% entrenamiento, 20% prueba)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear el modelo de Árbol de Decisión
model = DecisionTreeClassifier(random_state=42)

# Entrenar el modelo
model.fit(X_train, y_train)

# Hacer predicciones sobre el conjunto de prueba
y_pred = model.predict(X_test)

# Evaluar el modelo
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy del modelo: {accuracy * 100:.2f}%')

# Visualizar el árbol de decisión
plt.figure(figsize=(15,10))
plot_tree(model, filled=True, feature_names=X.columns, class_names=model.classes_, rounded=True)
plt.show()
